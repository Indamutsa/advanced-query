<!--?xml version="1.0" encoding="UTF-8"?--> <html> <head></head> <body> <ecore:epackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="libraryModel_ecore" nsuri="http://www.example.org/libraryModel_ecore" nsprefix="libraryModel_ecore"> <eannotations source="prepareApplication"> <details key="sourceCodeMain" value=" // Create new Library Model instance std::shared_ptr<LibraryModel> lm = factory->createLibraryModel(); std::shared_ptr<Book> bookMag = factory->createBook_in_Library(lm); bookMag->setName(&quot;Magritte&quot;); std::shared_ptr<Author> author = factory->createAuthor_in_Library(lm); author->setName(&quot;David Sylvester&quot;); bookMag->getAuthors()->add(author); std::shared_ptr<Picture> picture = factory->createPicture_in_Book(bookMag); picture->setName(&quot;Der Verrat der Binder (La trahison des images), 1929: l, 60x82 cm&quot;); picture->setPageNumber(212); lm->printLibrary(); std::cout << &quot;--------------------------&quot; << std::endl; std::cout << &quot;build model in generic way&quot; << std::endl; // can be used, if external (model independent) library can be specified inside the ecore model // std::shared_ptr<PluginFramework> pfw = PluginFramework::eInstance(); // std::shared_ptr<MDE4CPPPlugin> plugin = pfw->findPluginByName(&quot;libraryModel_ecore&quot;); std::shared_ptr<MDE4CPPPlugin> plugin = LibraryModel_ecorePlugin::eInstance(); if (!plugin) { std::cout << &quot;plugin not found&quot; << std::endl; } else { std::cout << &quot;generic model ...&quot; << std::endl; std::shared_ptr<ecore::EObject> xlm = plugin->create(&quot;LibraryModel&quot;); std::shared_ptr<ecore::EObject> xbook = plugin->create(&quot;Book&quot;, xlm, package->LIBRARYMODEL_ATTRIBUTE_BOOK); std::string bookname = &quot;Magritte&quot;; xbook->eSet(package->getNamedElement_Attribute_name(), eAny(bookname)); std::shared_ptr<ecore::EObject> xauthor = plugin->create(&quot;Author&quot;, xlm, package->LIBRARYMODEL_ATTRIBUTE_AUTHORS); std::string authorname = &quot;David Sylvester&quot;; xauthor->eSet(package->getNamedElement_Attribute_name(), eAny(authorname)); Any anyxbookauthors = xbook->eGet(package->getBook_Attribute_authors()); std::shared_ptr<Bag<ecore::EObject>> bookauthors = anyxbookauthors->get<std::shared_ptr<Bag<ecore::EObject>>>(); bookauthors->add(xauthor); xbook->eSet(package->getBook_Attribute_authors(), eAny(bookauthors)); std::shared_ptr<ecore::EObject> xpicture = plugin->create(&quot;Picture&quot;, xbook, package->BOOK_ATTRIBUTE_PICTURES); int xint = 212; xpicture->eSet(package->getPicture_Attribute_pageNumber(), eAny(xint)); std::string picname = &quot;Der Verrat der Binder (La trahison des images), 1929: l, 60x82 cm&quot;; xpicture->eSet(package->getNamedElement_Attribute_name(), eAny(picname)); // TODO call printLibrary by using invoce auto x = std::dynamic_pointer_cast<LibraryModel>(xlm); x->printLibrary(); }"></details> <details key="sourceCodeIncludes" value="#include &quot;abstractDataTypes/Any.hpp&quot; #include &quot;ecore/EAttribute.hpp&quot; #include &quot;ecore/EReference.hpp&quot; //#include &quot;pluginFramework/PluginFramework.hpp&quot; // can be used, if external (model independent) library can be specified inside the ecore model #include &quot;pluginFramework/MDE4CPPPlugin.hpp&quot; #include &quot;libraryModel_ecore/LibraryModel_ecorePlugin.hpp&quot; "></details> </eannotations> <eclassifiers xsi:type="ecore:EClass" name="Book" esupertypes="#//NamedElement"> <estructuralfeatures xsi:type="ecore:EReference" name="authors" upperBound="-1" eType="#//Author" /> <estructuralfeatures xsi:type="ecore:EReference" name="library" eType="#//LibraryModel" eOpposite="#//LibraryModel/book" /> <estructuralfeatures xsi:type="ecore:EReference" name="pictures" upperBound="-1" eType="#//Picture" containment="true" eOpposite="#//Picture/book" /> </eclassifiers> <eclassifiers xsi:type="ecore:EClass" name="Author" esupertypes="#//NamedElement"> <estructuralfeatures xsi:type="ecore:EReference" name="library" eType="#//LibraryModel" eOpposite="#//LibraryModel/authors" /> </eclassifiers> <eclassifiers xsi:type="ecore:EClass" name="LibraryModel"> <eannotations source="http://sse.tu-ilmenau.de/codegen"> <details key="includes" value="#include &quot;libraryModel_ecore/Picture.hpp&quot;"></details> </eannotations> <eoperations name="printLibrary"> <eannotations source="http://sse.tu-ilmenau.de/codegen"> <details key="body" value=" std::shared_ptr<Bag<libraryModel_ecore::Book>> books = this->getBook(); for(Bag<libraryModel_ecore::Book>::const_iterator it=books->begin(); it!=books->end(); it++) { std::cout << &quot;The book &quot; << (*it)->getName() << std::endl; { std::cout << &quot;\twas written by:&quot; << std::endl; std::shared_ptr< Bag<Author> > authors= (*it)->getAuthors(); for(Bag<Author>::const_iterator itA=authors->begin();itA!=authors->end();itA++) { std::cout << &quot;\t\t- &quot; << (*itA)->getName() << std::endl; } } { std::cout << &quot;\tIndex of Figures:&quot; << std::endl; std::shared_ptr< Bag<Picture> > pictures= (*it)->getPictures(); for(Bag<Picture>::const_iterator itP=pictures->begin();itP!=pictures->end();itP++) { std::cout << &quot;\t\t- &quot; << (*itP)->getName() << &quot; - Page number: &quot;<< (*itP)->getPageNumber() << std::endl; } } }"></details> </eannotations> </eoperations> <estructuralfeatures xsi:type="ecore:EReference" name="book" upperBound="-1" eType="#//Book" containment="true" eOpposite="#//Book/library" /> <estructuralfeatures xsi:type="ecore:EReference" name="authors" upperBound="-1" eType="#//Author" containment="true" eOpposite="#//Author/library" /> </eclassifiers> <eclassifiers xsi:type="ecore:EClass" name="NamedElement"> <estructuralfeatures xsi:type="ecore:EAttribute" name="Name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String" /> </eclassifiers> <eclassifiers xsi:type="ecore:EClass" name="Picture" esupertypes="#//NamedElement"> <estructuralfeatures xsi:type="ecore:EReference" name="book" eType="#//Book" eOpposite="#//Book/pictures" /> <estructuralfeatures xsi:type="ecore:EAttribute" name="pageNumber" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer" /> </eclassifiers> </ecore:epackage> </body> </html> 